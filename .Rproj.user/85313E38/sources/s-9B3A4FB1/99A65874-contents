# Load package(s)
library(tidymodels)
library(tidyverse)

# Seed
set.seed(3013)
## load dataÂ 

wildfires_dat <- read_csv("data/wildfires.csv") %>%
  janitor::clean_names() %>%
  mutate(
    winddir = factor(winddir, levels = c("N", "NE", "E", "SE", "S", "SW", "W", "NW")),
    traffic = factor(traffic, levels = c("lo", "med", "hi")),
    wlf = factor(wlf, levels = c(1, 0), labels = c("yes", "no"))
  ) %>%
  select(-burned)

## split data
wildfires_split <- initial_split(wildfires_dat, prop = 0.80, strata = wlf)
wildfires_train <- training(wildfires_split)
wildfires_test <- testing(wildfires_split)
save(wildfires_train, wildfires_test, file = "model_info/input/wildfires_split.rda")

wildfires_rec <- recipe(wlf ~ ., data = wildfires_train) %>%
  step_dummy(all_nominal(), -all_outcomes(), one_hot = TRUE)

en_rec <- wildfires_rec %>%
  step_interact(wlf ~ (.)^2)

## set up models

### Elastic net
en_model <- logistic_reg(mixture = tune(),
                         penalty = tune()) %>%
  set_engine("glmnet")

### Nearest neighbors
nn_model <- nearest_neighbor(mode = "classification",
                             neighbors = tune()) %>%
  set_engine("kknn")

### Random forest
rf_model <- rand_forest(mode = "classification",
                        mtry = tune(),
                        min_n = tune())%>%
  set_engine("ranger")

### Boosted tree
bt_model <- boost_tree(mode = "classification",
                       mtry = tune(),
                       min_n = tune(),
                       learn_rate = tune()) %>%
  set_engine("xgboost")


### Support vector machine (polynomial)
svm_poly_model <- svm_poly(mode = "classification",
                           cost = tune(),
                           degree = tune(),
                           scale_factor = tune()) %>%
  set_engine("kernlab")

### Support vector machine (radial basis function)
svm_rbf_model <- svm_rbf(mode = "classification",
                         cost = tune(),
                         rbf_sigma = tune()) %>%
  set_engine("kernlab")

###  Single Layer Neural Network (multilayer perceptron --- mlp)
mlp_model <- mlp(mode = "classification",
                 hidden_units = tune(),
                 penalty = tune()) %>%
  set_engine("nnet")

### Multivariate adaptive regression splines (MARS)
mars_model <- mars(mode = "classification",
                   num_terms = tune(),
                   prod_degree = tune()) %>%
  set_engine("earth")

## Set up workflows

### Elastic net
en_workflow <- workflow() %>%
  add_recipe(en_rec) %>%
  add_model(en_model)

### Nearest neighbors
nn_workflow <- workflow() %>%
  add_recipe(wildfires_rec) %>%
  add_model(nn_model)

### Random forest
rf_workflow <- workflow() %>%
  add_recipe(wildfires_rec) %>%
  add_model(rf_model)

### Boosted tree
bt_workflow <- workflow() %>%
  add_recipe(wildfires_rec) %>%
  add_model(bt_model)

### Support vector machine (polynomial)
svm_poly_workflow <- workflow() %>%
  add_recipe(wildfires_rec) %>%
  add_model(svm_poly_model)

### Support vector machine (radial basis function)
svm_rbf_workflow <- workflow() %>%
  add_recipe(wildfires_rec) %>%
  add_model(svm_rbf_model)

###  Single Layer Neural Network (multilayer perceptron --- mlp)
mlp_workflow <- workflow() %>%
  add_recipe(wildfires_rec) %>%
  add_model(mlp_model)

### Multivariate adaptive regression splines (MARS)
mars_workflow <- workflow() %>%
  add_recipe(wildfires_rec) %>%
  add_model(mars_model)

## Set up grids

### Elastic net
en_grid <- grid_regular(parameters(en_workflow), levels = 5)

### Nearest neighbors
nn_grid <- grid_regular(parameters(nn_workflow), levels = 5)

### Random forest
rf_params <- parameters(rf_workflow) %>%
  update(mtry = mtry(range = c(1,15)))
rf_grid <- grid_regular(rf_params, levels = 5)

### Boosted tree
bt_params <- parameters(bt_workflow) %>%
  update(mtry = mtry(range = c(1,15)))
bt_grid <- grid_regular(bt_params, levels = 5)

### Support vector machine (polynomial)
svm_poly_grid <- grid_regular(parameters(svm_poly_workflow), levels = 5)

### Support vector machine (radial basis function)
svm_rbf_grid <- grid_regular(parameters(svm_rbf_workflow), levels = 5)

###  Single Layer Neural Network (multilayer perceptron --- mlp)
mlp_grid <- grid_regular(parameters(mlp_workflow), levels = 5)

### Multivariate adaptive regression splines (MARS)
mars_params <- parameters(mars_workflow) %>%
  update(num_terms = num_terms(range = c(1,10)))
mars_grid <- grid_regular(mars_params, levels = 5)

## Set up folds and control
folds <- vfold_cv(wildfires_train, v = 5, repeats = 3, strata = wlf)
control <- control_resamples(verbose = TRUE)

## Write out objects for jobs
save(en_workflow, en_grid, folds, control, file = "model_info/input/en_variables.rda")
save(nn_workflow, nn_grid, folds, control, file = "model_info/input/nn_variables.rda")
save(rf_workflow, rf_grid, folds, control, file = "model_info/input/rf_variables.rda")
save(bt_workflow, bt_grid, folds, control, file = "model_info/input/bt_variables.rda")
save(svm_poly_workflow, svm_poly_grid, folds, control, file = "model_info/input/svm_poly_variables.rda")
save(svm_rbf_workflow, svm_rbf_grid, folds, control, file = "model_info/input/svm_rbf_variables.rda")
save(mlp_workflow, mlp_grid, folds, control, file = "model_info/input/mlp_variables.rda")
save(mars_workflow, mars_grid, folds, control, file = "model_info/input/mars_variables.rda")

## Read objects from completed jobs
tic.clearlog()
en_tuned <- readRDS("model_info/output/en_tuned.rds")
nn_tuned <- readRDS("model_info/output/nn_tuned.rds")
rf_tuned <- readRDS("model_info/output/rf_tuned.rds")
bt_tuned <- readRDS("model_info/output/bt_tuned.rds")
svm_poly_tuned <- readRDS("model_info/output/svm_poly_tuned.rds")
svm_rbf_tuned <- readRDS("model_info/output/svm_rbf_tuned.rds")
mlp_tuned <- readRDS("model_info/output/mlp_tuned.rds")
mars_tuned <- readRDS("model_info/output/mars_tuned.rds")
time_log <- tic.log()
time_log
model_times <- data.frame("model" = c("Elastic Net", "Nearest Neighbors", "Random Forest", "Boosted Tree", "Support Vector Machine (polynomial)", "Support Vector Machine (radial basis function)", "Single Layer Neural Network (multilayer perceptron)","Multivariate adaptive regression splines (MARS)"),
                          "runtime" = c(61.365, 112.084, 21.716, 66.757, 13.677, 83.13, 63.104, 64.588))
saveRDS(model_times, "model_info/output/model_times.rds")

### Elastic net
max(show_best(en_tuned, metric = "accuracy")$mean)
# accuracy 0.795989

### Nearest neighbors
max(show_best(nn_tuned, metric = "accuracy")$mean)
# accuracy  0.731656

### Random forest
max(show_best(rf_tuned, metric = "accuracy")$mean)
# accuracy  0.779153

### Boosted tree
max(show_best(bt_tuned, metric = "accuracy")$mean)
# accuracy 0.7333854

### Support vector machine (polynomial)
max(show_best(svm_poly_tuned, metric = "accuracy")$mean)
# accuracy 0.7823202

### Support vector machine (radial basis function)
max(show_best(svm_rbf_tuned, metric = "accuracy")$mean)
# accuracy 0.8100224

###  Single Layer Neural Network (multilayer perceptron --- mlp)
max(show_best(mlp_tuned, metric = "accuracy")$mean)
# accuracy 0.7841329

### Multivariate adaptive regression splines (MARS)
max(show_best(mars_tuned, metric = "accuracy")$mean)
# accuracy 0.7699745

model_accuracies <- data.frame("model" = c("Elastic Net", "Nearest Neighbors", "Random Forest", "Boosted Tree", "Support Vector Machine (polynomial)", "Support Vector Machine (radial basis function)", "Single Layer Neural Network (multilayer perceptron)","Multivariate adaptive regression splines (MARS)"),
           "accuracy" = c(0.795989, 0.731656, 0.779153, 0.7333854, 0.7823202, 0.8100224, 0.7841329, 0.7699745))
saveRDS(model_accuracies, "model_info/output/model_accuracies.rds")

# The best performing model is the Support Vector Machine using a radial basis function with an accuracy of  0.8100224
svm_rbf_finalized <- svm_rbf_workflow %>%
  finalize_workflow(select_best(svm_rbf_tuned, metric = "accuracy")) %>%
  fit(wildfires_train)
svm_rbf_predictions <- predict(svm_rbf_finalized, new_data = wildfires_test, type = "prob") %>%
  bind_cols(wildfires_test %>% select(wlf)) %>%
  mutate(.pred_class = fct_rev(as.factor(ifelse(.pred_yes > .pred_no, "yes", "no"))))
wildfires_metrics <- metric_set(accuracy)
svm_rbf_predictions %>%
  wildfires_metrics(truth = wlf, estimate = .pred_class)
# The Support Vector Machine using a radial basis function had an accuracy of 0.768 on the testing set
conf_mat(svm_rbf_predictions, truth = wlf, estimate = .pred_class)
# Prediction yes no
# yes  33 10
# no   13 43
autoplot(roc_curve(svm_rbf_predictions,truth = wlf,estimate = .pred_yes))

