---
title: "work"
author: "Natalie Ghidali"
date: "4/26/2021"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r}
library(tidyverse)
library(tidymodels)
library(lubridate)
set.seed(42)
```

```{r}
loans <- read_csv("data/train.csv")  %>%
  mutate(
    addr_state = factor(addr_state),
    application_type = factor(application_type),
    earliest_cr_line = as.numeric(parse_date(earliest_cr_line, format = "%b-%Y")),
    emp_length = factor(
      emp_length,
      ordered = TRUE,
      levels = c(
        "< 1 year",
        "1 year",
        "2 years",
        "3 years",
        "4 years",
        "5 years",
        "6 years",
        "7 years",
        "8 years",
        "9 years",
        "10+ years",
        "n/a"
      )
    ),
    emp_title = factor(emp_title),
    grade = factor(grade, ordered = TRUE),
    home_ownership = factor(home_ownership),
    initial_list_status = factor(initial_list_status),
    last_credit_pull_d = as.numeric(parse_date(last_credit_pull_d, format = "%b-%Y")),
    purpose = factor(purpose),
    sub_grade = factor(sub_grade, ordered = TRUE),
    term = factor(term),
    verification_status = factor(verification_status),
    hi_int_prncp_pd = factor(hi_int_prncp_pd)
  )
```

```{r}
testing_data <- read_csv("data/test.csv")  %>%
  mutate(
    addr_state = factor(addr_state),
    application_type = factor(application_type),
    earliest_cr_line = as.numeric(parse_date(earliest_cr_line, format = "%b-%Y")),
    emp_length = factor(
      emp_length,
      ordered = TRUE,
      levels = c(
        "< 1 year",
        "1 year",
        "2 years",
        "3 years",
        "4 years",
        "5 years",
        "6 years",
        "7 years",
        "8 years",
        "9 years",
        "10+ years",
        "n/a"
      )
    ),
    emp_title = factor(emp_title),
    grade = factor(grade, ordered = TRUE),
    home_ownership = factor(home_ownership),
    initial_list_status = factor(initial_list_status),
    last_credit_pull_d = as.numeric(parse_date(last_credit_pull_d, format = "%b-%Y")),
    purpose = factor(purpose),
    sub_grade = factor(sub_grade, ordered = TRUE),
    term = factor(term),
    verification_status = factor(verification_status)
  )
```

```{r}
# no split needed since test set is already seperate
loan_folds <- vfold_cv(data = loans, v = 10, repeats = 5)
```

```{r}
loan_recipe1 <- recipe(hi_int_prncp_pd ~ ., data = loans) %>%
  step_dummy(all_nominal(), -all_outcomes()) %>%
  step_normalize(all_predictors())

# prep(loan_recipe1) %>%
#   bake(new_data = NULL)
```

```{r}
#A Boosted tree model
bt_model <- boost_tree(mode = "classification", mtry = tune(), min_n = tune(),
                       learn_rate = tune()) %>%
  set_engine("xgboost")

bt_params <- parameters(bt_model) %>%
  update(mtry = mtry(range = c(1,18)),
         learn_rate = learn_rate(range = c(-5, -1)))
bt_grid <- grid_regular(bt_params,levels = 5)

bt_workflow <- workflow() %>% 
  add_model(bt_model) %>% 
  add_recipe(loan_recipe1)

save(bt_workflow, loan_folds, bt_grid, file = "bt_tuned_inputs.rda")

```

```{r}
bt_tuned <- readRDS("bt_tuned.rds")
```

```{r}
# autoplot(bt_tuned, metric = "rmse")
show_best(bt_tuned, metric = "accuracy")
bt_results <- bt_workflow %>% 
  finalize_workflow(select_best(bt_tuned, metric = "accuracy")) %>%
  fit(loans)
```
```{r}
bt_predictions <- predict(bt_results, new_data = testing_data) %>%
  bind_cols(testing_data %>% select(id)) %>%
  rename(
    Category = .pred_class,
    Id = id
  )

write_csv(bt_predictions, "predictions1.csv")
```


